generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  email        String    @unique
  passwordHash String
  firstName    String
  lastName     String
  createdAt    DateTime  @default(now())
  addresses    Address[]
  carts        Cart[]
  orders       Order[]
  reviews      Review[]
}

model Admin {
  id           String   @id @default(uuid())
  email        String   @unique
  username     String   @unique
  passwordHash String
  createdAt    DateTime @default(now())
}

model Address {
  id        String   @id @default(uuid())
  userId    String
  firstName String
  lastName  String
  line1     String
  line2     String?
  city      String
  region    String
  zip       String
  country   String
  phone     String?
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Category {
  id          String            @id @default(uuid())
  title       String
  slug        String            @unique
  description String
  imageUrl    String
  products    ProductCategory[]
}

model Product {
  id            String            @id @default(uuid())
  title         String
  slug          String            @unique
  description   String
  technicalInfo String?
  price         Decimal           @db.Decimal(10, 2)
  stock         Int               @default(0)
  mainImageUrl  String
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  cartItems     CartItem[]
  orderItems    OrderItem[]
  categories    ProductCategory[]
  images        ProductImage[]
  reviews       Review[]
}

model ProductImage {
  id        String  @id @default(uuid())
  productId String
  publicId  String?
  url       String
  alt       String?
  position  Int     @default(0)
  product   Product @relation(fields: [productId], references: [id])

  @@index([productId])
}

model ProductCategory {
  productId  String
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])

  @@id([productId, categoryId])
  @@index([categoryId])
}

model Review {
  id        String   @id @default(uuid())
  productId String
  userId    String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([productId])
  @@index([userId])
}

model Cart {
  id        String     @id @default(uuid())
  userId    String?
  sessionId String?    @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User?      @relation(fields: [userId], references: [id])
  items     CartItem[]
}

model CartItem {
  id        String  @id @default(uuid())
  cartId    String
  productId String
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  cart      Cart    @relation(fields: [cartId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
  @@index([productId])
}

model Order {
  id               String      @id @default(uuid())
  userId           String?
  emailSnapshot    String
  shippingFullName String?
  shippingPhone    String?
  shippingLine1    String?
  shippingLine2    String?
  shippingCity     String?
  shippingRegion   String?
  shippingZip      String?
  shippingCountry  String?
  subtotal         Decimal     @default(0.00) @db.Decimal(10, 2)
  shipping         Decimal     @default(0.00) @db.Decimal(10, 2)
  discount         Decimal     @default(0.00) @db.Decimal(10, 2)
  tax              Decimal     @default(0.00) @db.Decimal(10, 2)
  total            Decimal     @db.Decimal(10, 2)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  user             User?       @relation(fields: [userId], references: [id])
  items            OrderItem[]

  @@index([userId])
}

model OrderItem {
  id           String   @id @default(uuid())
  orderId      String
  productId    String?
  nameSnapshot String
  skuSnapshot  String?
  unitPrice    Decimal  @db.Decimal(10, 2)
  quantity     Int
  order        Order    @relation(fields: [orderId], references: [id])
  product      Product? @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}
